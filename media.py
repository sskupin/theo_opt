import numpy as np
import scipy.special as sps
import scipy.constants as spc
import scipy.interpolate as spi

# allroutines for lambdav in nm

def Al(lambdav): # Original data: Rakić et al. 1998, https://doi.org/10.1364/AO.37.005271 62 - 24700 nm

    # Lorentz-Drude (LD) model parameters
    ωp = 14.98  #eV
    f0 = 0.523
    Γ0 = 0.047 #eV
    f1 = 0.227
    Γ1 = 0.333 #eV
    ω1 = 0.162 #eV
    f2 = 0.050
    Γ2 = 0.312 #eV
    ω2 = 1.544 #eV
    f3 = 0.166
    Γ3 = 1.351 #eV
    ω3 = 1.808 #eV
    f4 = 0.030
    Γ4 = 3.382 #eV
    ω4 = 3.473 #eV
    Ωp = f0**.5 * ωp  #eV

    def LD(ω):  #ω: eV
        ε = 1-Ωp**2/(ω*(ω+1j*Γ0))
        ε += f1*ωp**2 / ((ω1**2-ω**2)-1j*ω*Γ1)
        ε += f2*ωp**2 / ((ω2**2-ω**2)-1j*ω*Γ2)
        ε += f3*ωp**2 / ((ω3**2-ω**2)-1j*ω*Γ3)
        ε += f4*ωp**2 / ((ω4**2-ω**2)-1j*ω*Γ4)
        return ε
    
    eV = spc.h*spc.c/(spc.e*lambdav*1e-9)  
    return LD(eV)

def AlAs(lambdav): # Original data: Rakić and Majewski 1996, https://doi.org/10.1063/1.363586 220 - 2400 nm

    # model parameters
    E0   = 2.993   #eV
    Δ0   = 3.201-E0#eV
    E1   = 3.888   #eV
    Δ1   = 4.087-E1#eV
    εinf = 0.002
    A    = 18.0    #eV**1.5
    Γ0   = 0.046   #eV
    α0   = 1.11
    B1   = 3.50
    B1s  = 0.11
    B1x  = 0.69
    B2x  = 0.82
    Γ1   = 0.11    #eV
    α1   = 0.01
    f0pr = 2.78    #eV (not eV**2!!!)
    Γ0pr = 0.35    #eV
    E0pr = 4.64    #eV
    f2x  = 2.88    #eV (not eV**2!!!)
    Γ2x  = 0.53    #eV
    E2x  = 4.73    #eV
    f2Σ  = 7.04    #eV (not eV**2!!!)
    Γ2Σ  = 0.65    #eV
    E2Σ  = 4.89    #eV
    α2   = 0.27

    def Epsilon_I(ħω):
        Γ = Γ0*np.exp(-α0*((ħω-E0)/Γ0)**2)
        χ0 = (ħω + 1j*Γ) / E0 + 1e-100j #1e-100j: to avoid ambiguity in (1-χ)**0.5
        χ0s = (ħω + 1j*Γ) / (E0+Δ0) + 1e-100j #1e-100j: --"--
        fχ0 =  χ0**-2  * ( 2 - (1+χ0)**0.5  - (1-χ0)**0.5 )
        fχ0s = χ0s**-2 * ( 2 - (1+χ0s)**0.5 - (1-χ0s)**0.5 )
        return A*E0**-1.5 * (fχ0+0.5*(E0/(E0+Δ0))**1.5*fχ0s)

    def Epsilon_II(ħω):
        Γ = Γ1*np.exp(-α1*((ħω-E1)/Γ1)**2)
        χ1 = (ħω + 1j*Γ) / E1
        χ1s = (ħω + 1j*Γ) / (E1+Δ1)
        return -B1*χ1**-2*np.log(1-χ1**2) - B1s*χ1s**-2*np.log(1-χ1s**2)

    def Epsilon_III(ħω):
        Γ = Γ1*np.exp(-α1*((ħω-E1)/Γ1)**2)
        y=0
        for n in range(1,1000):
            y += 1/(2*n-1)**3 * ( B1x/(E1-ħω-1j*Γ) + B2x/(E1+Δ1-ħω-1j*Γ) )
        return y

    def Epsilon_IV(ħω):
        Γ = Γ0pr*np.exp(-α2*((ħω-E0pr)/Γ0pr)**2)
        ε0pr = f0pr**2 / (E0pr**2 - ħω**2 - 1j*ħω*Γ)
        Γ = Γ2x*np.exp(-α2*((ħω-E2x)/Γ2x)**2)
        ε2x = f2x**2 / (E2x**2 - ħω**2 - 1j*ħω*Γ)  
        Γ = Γ2Σ*np.exp(-α2*((ħω-E2Σ)/Γ2Σ)**2)
        ε2Σ = f2Σ**2 / (E2Σ**2 - ħω**2 - 1j*ħω*Γ)
        return εinf + ε0pr + ε2x + ε2Σ

    eV = spc.h*spc.c/(spc.e*lambdav*1e-9)
    epsilon_p = np.real(Epsilon_I(eV) + Epsilon_II(eV) + Epsilon_III(eV) + Epsilon_IV(eV))
    epsilon_pp = np.imag(Epsilon_I(eV) + Epsilon_II(eV) + Epsilon_III(eV) + Epsilon_IV(eV))
    bandedgefilter = (1-sps.erf((lambdav-440)/10))*.5 # remove absorption overestimated in theory
    return epsilon_p + 1j*bandedgefilter*epsilon_pp

def GaAs(lambdav): # Original data: Rakić and Majewski 1996, https://doi.org/10.1063/1.363586 210 - 12000 nm
    
    # model parameters
    E0   = 1.410   #eV
    Δ0   = 1.746-E0#eV
    E1   = 2.926   #eV
    Δ1   = 3.170-E1#eV
    εinf = 0.77
    A    = 3.97    #eV**1.5
    Γ0   = 0.039   #eV
    α0   = 1.65
    B1   = 4.15
    B1s  = 1.54
    B1x  = 1.39
    B2x  = 0.56
    Γ1   = 0.15    #eV
    α1   = 0.01
    f0pr = 3.89    #eV (not eV**2!!!)
    Γ0pr = 0.55    #eV
    E0pr = 4.49    #eV
    f2x  = 6.05    #eV (not eV**2!!!)
    Γ2x  = 0.68    #eV
    E2x  = 4.74    #eV
    f2Σ  = 2.62    #eV (not eV**2!!!)
    Γ2Σ  = 0.26    #eV
    E2Σ  = 4.88    #eV
    α2   = 0.060

    def Epsilon_I(ħω):
        Γ = Γ0*np.exp(-α0*((ħω-E0)/Γ0)**2)
        χ0 = (ħω + 1j*Γ) / E0 + 1e-100j #1e-100j: to avoid ambiguity in (1-χ)**0.5
        χ0s = (ħω + 1j*Γ) / (E0+Δ0) + 1e-100j #1e-100j: --"--
        fχ0 =  χ0**-2  * ( 2 - (1+χ0)**0.5  - (1-χ0)**0.5 )
        fχ0s = χ0s**-2 * ( 2 - (1+χ0s)**0.5 - (1-χ0s)**0.5 )
        return A*E0**-1.5 * (fχ0+0.5*(E0/(E0+Δ0))**1.5*fχ0s)

    def Epsilon_II(ħω):
        Γ = Γ1*np.exp(-α1*((ħω-E1)/Γ1)**2)
        χ1 = (ħω + 1j*Γ) / E1
        χ1s = (ħω + 1j*Γ) / (E1+Δ1)
        return -B1*χ1**-2*np.log(1-χ1**2) - B1s*χ1s**-2*np.log(1-χ1s**2)

    def Epsilon_III(ħω):
        Γ = Γ1*np.exp(-α1*((ħω-E1)/Γ1)**2)
        y=0
        for n in range(1,1000):
            y += 1/(2*n-1)**3 * ( B1x/(E1-ħω-1j*Γ) + B2x/(E1+Δ1-ħω-1j*Γ) )
        return y

    def Epsilon_IV(ħω):
        Γ = Γ0pr*np.exp(-α2*((ħω-E0pr)/Γ0pr)**2)
        ε0pr = f0pr**2 / (E0pr**2 - ħω**2 - 1j*ħω*Γ)
        Γ = Γ2x*np.exp(-α2*((ħω-E2x)/Γ2x)**2)
        ε2x = f2x**2 / (E2x**2 - ħω**2 - 1j*ħω*Γ)  
        Γ = Γ2Σ*np.exp(-α2*((ħω-E2Σ)/Γ2Σ)**2)
        ε2Σ = f2Σ**2 / (E2Σ**2 - ħω**2 - 1j*ħω*Γ)
        return εinf + ε0pr + ε2x + ε2Σ
    
    eV = spc.h*spc.c/(spc.e*lambdav*1e-9)
    return Epsilon_I(eV) + Epsilon_II(eV) + Epsilon_III(eV) + Epsilon_IV(eV)

def Ag(lambdav): # Original data: Rakić et al. 1998, https://doi.org/10.1364/AO.37.005271 250 - 12000 nm

    # Lorentz-Drude (LD) model parameters
    ωp = 9.01  #eV
    f0 = 0.845
    Γ0 = 0.048 #eV
    f1 = 0.065
    Γ1 = 3.886 #eV
    ω1 = 0.816 #eV
    f2 = 0.124
    Γ2 = 0.452 #eV
    ω2 = 4.481 #eV
    f3 = 0.011
    Γ3 = 0.065 #eV
    ω3 = 8.185 #eV
    f4 = 0.840
    Γ4 = 0.916 #eV
    ω4 = 9.083 #eV
    f5 = 5.646
    Γ5 = 2.419 #eV
    ω5 = 20.29 #eV
    Ωp = f0**.5 * ωp  #eV

    def LD(ω):  #ω: eV
        ε = 1-Ωp**2/(ω*(ω+1j*Γ0))
        ε += f1*ωp**2 / ((ω1**2-ω**2)-1j*ω*Γ1)
        ε += f2*ωp**2 / ((ω2**2-ω**2)-1j*ω*Γ2)
        ε += f3*ωp**2 / ((ω3**2-ω**2)-1j*ω*Γ3)
        ε += f4*ωp**2 / ((ω4**2-ω**2)-1j*ω*Γ4)
        ε += f5*ωp**2 / ((ω5**2-ω**2)-1j*ω*Γ5)
        return ε
    
    eV = spc.h*spc.c/(spc.e*lambdav*1e-9)  
    return LD(eV)

def BK7(lambdav): # N-BK7 (SCHOTT) 300 - 2500 nm
    x = lambdav/1000
    n = (1+1.03961212/(1-0.00600069867/x**2)+0.231792344/(1-0.0200179144/x**2)+1.01046945/(1-103.560653/x**2))**.5
    xi = [0.300,0.310,0.320,0.334,0.350,0.365,0.370,0.380,0.390,0.400,0.405,0.420,0.436,0.460,0.500,0.546,0.580,0.620,0.660,0.700,1.060,1.530,1.970,2.325,2.500]
    ki = [2.8607E-06,1.3679E-06,6.6608E-07,2.6415E-07,9.2894E-08,3.4191E-08,2.7405E-08,2.0740E-08,1.3731E-08,1.0227E-08,9.0558E-09,9.3912E-09,1.1147E-08,1.0286E-08,\
          9.5781E-09,6.9658E-09,9.2541E-09,1.1877E-08,1.2643E-08,8.9305E-09,1.0137E-08,9.8390E-08,1.0933E-06,4.2911E-06,8.1300E-06]
    k = spi.interp1d(xi, ki, 'cubic')
    return (n+1j*k(x))**2    

def BaSF(lambdav): # N-BASF2 (SCHOTT) 370 - 2500 nm
    x = lambdav/1000
    n = (1+1.53652081/(1-0.0108435729/x**2)+0.156971102/(1-0.0562278762/x**2)+1.30196815/(1-131.3397/x**2))**.5
    xi = [0.370,0.380,0.390,0.400,0.405,0.420,0.436,0.460,0.500,0.546,0.580,0.620,0.660,0.700,1.060,1.530,1.970,2.325,2.500]
    ki = [3.3135E-06,1.3782E-06,6.7623E-07,3.6629E-07,2.8767E-07,1.5579E-07,1.0072E-07,7.3564E-08,4.6837E-08,2.6267E-08,2.4158E-08,2.9827E-08,3.1751E-08,2.2394E-08,\
          1.0137E-08,7.3606E-08,4.5507E-07,2.0310E-06,3.0690E-06]
    k = spi.interp1d(xi, ki, 'cubic')
    return (n+1j*k(x))**2  

def silica(lambdav): #  I. H. Malitson. Interspecimen comparison of the refractive index of fused silica, J. Opt. Soc. Am. 55, 1205-1208 (1965) 210 - 6700 nm
    x = lambdav/1000
    return 1+0.6961663/(1-(0.0684043/x)**2)+0.4079426/(1-(0.1162414/x)**2)+0.8974794/(1-(9.896161/x)**2)+0j  

def Si(lambdav): # Silicon, M. A. Green, Sol. Energ. Mat. Sol. Cells 92, 1305–1310 (2008) and C. D. Salzberg and J. J. Villa, J. Opt. Soc. Am., 47, 244-246 (1957) 250 - 2400 nm
    x = lambdav/1000
    xi = [2.5000e-01,2.6000e-01,2.7000e-01,2.8000e-01,2.9000e-01,3.0000e-01,3.1000e-01,3.2000e-01,3.3000e-01,3.4000e-01,3.5000e-01,3.6000e-01,3.7000e-01,3.8000e-01,\
          3.9000e-01,4.0000e-01,4.1000e-01,4.2000e-01,4.3000e-01,4.4000e-01,4.5000e-01,4.6000e-01,4.7000e-01,4.8000e-01,4.9000e-01,5.0000e-01,5.1000e-01,5.2000e-01,\
          5.3000e-01,5.4000e-01,5.5000e-01,5.6000e-01,5.7000e-01,5.8000e-01,5.9000e-01,6.0000e-01,6.1000e-01,6.2000e-01,6.3000e-01,6.4000e-01,6.5000e-01,6.6000e-01,\
          6.7000e-01,6.8000e-01,6.9000e-01,7.0000e-01,7.1000e-01,7.2000e-01,7.3000e-01,7.4000e-01,7.5000e-01,7.6000e-01,7.7000e-01,7.8000e-01,7.9000e-01,8.0000e-01,\
          8.1000e-01,8.2000e-01,8.3000e-01,8.4000e-01,8.5000e-01,8.6000e-01,8.7000e-01,8.8000e-01,8.9000e-01,9.0000e-01,9.1000e-01,9.2000e-01,9.3000e-01,9.4000e-01,\
          9.5000e-01,9.6000e-01,9.7000e-01,9.8000e-01,9.9000e-01,1.0000e+00,1.0100e+00,1.0200e+00,1.0300e+00,1.0400e+00,1.0500e+00,1.0600e+00,1.0700e+00,1.0800e+00,\
          1.0900e+00,1.1000e+00,1.1100e+00,1.1200e+00,1.1300e+00,1.1400e+00,1.1500e+00,1.1600e+00,1.1700e+00,1.1800e+00,1.1900e+00,1.2000e+00,1.2100e+00,1.2200e+00,\
          1.2300e+00,1.2400e+00,1.2500e+00,1.2600e+00,1.2700e+00,1.2800e+00,1.2900e+00,1.3000e+00,1.3100e+00,1.3200e+00,1.3300e+00,1.3400e+00,1.3500e+00,1.3600e+00,\
          1.3700e+00,1.3800e+00,1.3900e+00,1.4000e+00,1.4100e+00,1.4200e+00,1.4300e+00,1.4400e+00,1.4500e+00,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,2.4]
    ni = [1.6650e+00,1.7570e+00,2.0680e+00,2.9590e+00,4.3560e+00,4.9760e+00,5.1210e+00,5.1120e+00,5.1950e+00,5.3010e+00,5.4940e+00,6.0260e+00,6.8910e+00,6.6160e+00,\
          6.0390e+00,5.6130e+00,5.3300e+00,5.1190e+00,4.9490e+00,4.8120e+00,4.6910e+00,4.5870e+00,4.4970e+00,4.4190e+00,4.3500e+00,4.2940e+00,4.2410e+00,4.1930e+00,\
          4.1510e+00,4.1120e+00,4.0770e+00,4.0450e+00,4.0150e+00,3.9880e+00,3.9630e+00,3.9400e+00,3.9180e+00,3.8980e+00,3.8790e+00,3.8610e+00,3.8440e+00,3.8280e+00,\
          3.8130e+00,3.7980e+00,3.7840e+00,3.7720e+00,3.7590e+00,3.7480e+00,3.7370e+00,3.7270e+00,3.7170e+00,3.7080e+00,3.6990e+00,3.6910e+00,3.6830e+00,3.6750e+00,\
          3.6680e+00,3.6610e+00,3.6540e+00,3.6470e+00,3.6410e+00,3.6350e+00,3.6300e+00,3.6240e+00,3.6190e+00,3.6140e+00,3.6090e+00,3.6040e+00,3.6000e+00,3.5950e+00,\
          3.5910e+00,3.5870e+00,3.5830e+00,3.5790e+00,3.5750e+00,3.5720e+00,3.5680e+00,3.5650e+00,3.5620e+00,3.5590e+00,3.5560e+00,3.5530e+00,3.5500e+00,3.5470e+00,\
          3.5450e+00,3.5420e+00,3.5400e+00,3.5370e+00,3.5350e+00,3.5320e+00,3.5300e+00,3.5280e+00,3.5260e+00,3.5240e+00,3.5220e+00,3.5200e+00,3.5180e+00,3.5170e+00,\
          3.5150e+00,3.5130e+00,3.5110e+00,3.5090e+00,3.5080e+00,3.5060e+00,3.5050e+00,3.5030e+00,3.5020e+00,3.5000e+00,3.4990e+00,3.4970e+00,3.4960e+00,3.4950e+00,\
          3.4940e+00,3.4920e+00,3.4910e+00,3.4900e+00,3.4890e+00,3.4880e+00,3.4870e+00,3.4860e+00,3.4850e+00,3.4821,3.4738,3.4670,3.4614,3.4567,3.4527,3.4492,3.4463,3.4437,3.4414]    
    ki = [3.6650e+00,4.0840e+00,4.6800e+00,5.2870e+00,5.2860e+00,4.2340e+00,3.5980e+00,3.3030e+00,3.1000e+00,2.9770e+00,2.9380e+00,2.9660e+00,2.1710e+00,9.4600e-01,\
          4.4500e-01,2.9600e-01,2.2700e-01,1.7600e-01,1.3800e-01,1.0700e-01,8.6302e-02,7.1381e-02,6.2086e-02,5.5004e-02,4.9131e-02,4.4165e-02,3.9367e-02,3.6415e-02,\
          3.3108e-02,3.0295e-02,2.7968e-02,2.5758e-02,2.4131e-02,2.2524e-02,2.1081e-02,1.9934e-02,1.8446e-02,1.7367e-02,1.6444e-02,1.5432e-02,1.4431e-02,1.3498e-02,\
          1.2743e-02,1.1905e-02,1.1201e-02,1.0528e-02,1.0057e-02,9.6257e-03,8.9461e-03,8.3620e-03,7.8185e-03,7.1970e-03,6.7402e-03,6.3933e-03,5.8340e-03,5.4113e-03,\
          4.9955e-03,4.6134e-03,4.2734e-03,3.9439e-03,3.6120e-03,3.2781e-03,2.9839e-03,2.6821e-03,2.4293e-03,2.1701e-03,1.9625e-03,1.7571e-03,1.5467e-03,1.3689e-03,\
          1.1793e-03,1.0237e-03,8.7225e-04,7.4866e-04,6.2238e-04,5.0930e-04,4.1071e-04,3.2386e-04,2.4753e-04,1.8704e-04,1.3620e-04,9.3631e-05,6.8118e-05,5.3285e-05,\
          4.0768e-05,3.0637e-05,2.3849e-05,1.7825e-05,1.3488e-05,9.0718e-06,6.2230e-06,3.8770e-06,2.0483e-06,6.1036e-07,3.4091e-07,2.1008e-07,1.2518e-07,7.9609e-08,\
          4.6004e-08,2.3682e-08,9.9472e-09,3.6096e-09,2.0213e-09,1.2223e-09,7.2885e-10,4.6553e-10,2.8147e-10,1.6807e-10,8.4670e-11,3.7322e-11,1.8263e-11,1.0281e-11,\
          6.5413e-12,4.1730e-12,2.5441e-12,1.5597e-12,9.5374e-13,5.6500e-13,2.8449e-13,2.0626e-13,1.3846e-13,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
    n = spi.interp1d(xi, ni, 'cubic')
    k = spi.interp1d(xi, ki, 'cubic')
    return (n(x)+1j*k(x))**2

def TiO2(lambdav): # J. R. DeVore, "Refractive Index of Rutile and Sphalerite," J. Opt. Soc. Am.41:416-419 (1951) ,n(o) 430 - 1530 nm
    x = lambdav/1000
    return 5.913+0.2441/(pow(x,2)-0.0803)+0j  

def AlGaAs70(lambdav): # Al(x)Ga(1-x)As; x=0.700, Original data: D. E. Aspnes, S. M. Kelso, R. A. Logan and R. Bhat. Optical properties of AlxGa1-xAs, J. Appl. Phys. 60, 754-767 (1986) and S. Adachi. Optical dispersion relations for GaP, GaAs, GaSb, InP, InAs, InSb, AlxGa1−xAs, and In1−xGaxAsyP1−y, J. Appl. Phys. 66, 6030-6040 (1989) 200 - 2400 nm

    x = lambdav/1000
    xi = [0.2066,0.2101,0.2138,0.2175,0.2214,0.2254,0.2296,0.2339,0.2384,0.2431,0.2480,0.2530,0.2583,0.2638,0.2695,0.2755,0.2818,0.2883,0.2952,0.3024,0.3100,0.3179,\
          0.3263,0.3351,0.3444,0.3542,0.3647,0.3757,0.3875,0.3999,0.4133,0.4275,0.4428,0.4592,0.4769,0.4959,0.5166,0.5391,0.5636,\
          5.9424e-01,6.0281e-01,6.1162e-01,6.2070e-01,6.3005e-01,6.3969e-01,6.4963e-01,6.5988e-01,6.7046e-01,6.8138e-01,6.9267e-01,7.0433e-01,7.1640e-01,7.2889e-01,\
          7.4182e-01,7.5521e-01,7.6910e-01,7.8351e-01,7.9847e-01,8.1402e-01,8.3018e-01,8.4699e-01,8.6450e-01,8.8275e-01,9.0179e-01,9.2166e-01,9.4243e-01,9.6416e-01,\
          9.8691e-01,1.0108e+00,1.0358e+00,1.0621e+00,1.0898e+00,1.1190e+00,1.1497e+00,1.1822e+00,1.2166e+00,1.2531e+00,1.2918e+00,1.3329e+00,1.3768e+00,1.4237e+00,\
          1.4739e+00,1.5277e+00,1.5857e+00,1.6482e+00,1.7158e+00,1.7892e+00,1.8692e+00,1.9566e+00,2.0527e+00,2.1586e+00,2.2761e+00,2.4071e+00]
    ni = [1.377,1.366,1.365,1.375,1.407,1.462,1.545,1.662,1.829,2.049,2.354,2.777,3.214,3.758,4.144,4.142,4.028,3.932,3.868,3.835,3.836,3.868,3.947,4.103,4.319,4.502,\
          4.665,4.615,4.471,4.325,4.196,4.084,3.987,3.906,3.823,3.746,3.696,3.595,3.500,\
          3.4111e+00,3.3951e+00,3.3798e+00,3.3652e+00,3.3512e+00,3.3377e+00,3.3247e+00,3.3122e+00,3.3001e+00,3.2885e+00,3.2773e+00,3.2664e+00,3.2559e+00,3.2458e+00,\
          3.2360e+00,3.2265e+00,3.2174e+00,3.2085e+00,3.1999e+00,3.1915e+00,3.1835e+00,3.1757e+00,3.1681e+00,3.1608e+00,3.1537e+00,3.1468e+00,3.1401e+00,3.1337e+00,\
          3.1274e+00,3.1214e+00,3.1155e+00,3.1099e+00,3.1044e+00,3.0991e+00,3.0940e+00,3.0891e+00,3.0843e+00,3.0798e+00,3.0753e+00,3.0711e+00,3.0670e+00,3.0630e+00,\
          3.0592e+00,3.0556e+00,3.0521e+00,3.0487e+00,3.0455e+00,3.0425e+00,3.0395e+00,3.0368e+00,3.0341e+00,3.0316e+00,3.0292e+00,3.0270e+00]    
    ki = [2.426,2.493,2.581,2.688,2.809,2.946,3.098,3.269,3.445,3.620,3.788,3.873,3.853,3.637,3.150,2.645,2.365,2.206,2.111,2.055,2.023,2.009,2.006,1.993,1.877,1.678,\
          1.357,0.980,0.735,0.574,0.460,0.374,0.307,0.245,0.184,0.129,0.069,0.03,0.01,\
          0.002,0.001,0.0005,0.0002,0.0001,0.00005,0.00002,0.00001,0.000005,0.000001,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    n = spi.interp1d(xi, ni, 'cubic')
    k = spi.interp1d(xi, ki, 'cubic')
    return (n(x)+1j*k(x))**2

def AlGaAs31(lambdav): # Al(x)Ga(1-x)As; x=0.315, Original data: D. E. Aspnes, S. M. Kelso, R. A. Logan and R. Bhat. Optical properties of AlxGa1-xAs, J. Appl. Phys. 60, 754-767 (1986) and S. Adachi. Optical dispersion relations for GaP, GaAs, GaSb, InP, InAs, InSb, AlxGa1−xAs, and In1−xGaxAsyP1−y, J. Appl. Phys. 66, 6030-6040 (1989) 200 - 2400 nm

    x = lambdav/1000
    xi = [0.2066,0.2101,0.2138,0.2175,0.2214,0.2254,0.2296,0.2339,0.2384,0.2431,0.2480,0.2530,0.2583,0.2638,0.2695,0.2755,0.2818,0.2883,0.2952,0.3024,0.3100,0.3179,\
          0.3263,0.3351,0.3444,0.3542,0.3647,0.3757,0.3875,0.3999,0.4133,0.4275,0.4428,0.4592,0.4769,0.4959,0.5166,0.5391,0.5636,0.5904,0.6199,0.6525,0.6888,0.7293,\
          7.4182e-01,7.5521e-01,7.6910e-01,7.8351e-01,7.9847e-01,8.1402e-01,8.3018e-01,8.4699e-01,8.6450e-01,8.8275e-01,9.0179e-01,9.2166e-01,9.4243e-01,9.6416e-01,\
          9.8691e-01,1.0108e+00,1.0358e+00,1.0621e+00,1.0898e+00,1.1190e+00,1.1497e+00,1.1822e+00,1.2166e+00,1.2531e+00,1.2918e+00,1.3329e+00,1.3768e+00,1.4237e+00,\
          1.4739e+00,1.5277e+00,1.5857e+00,1.6482e+00,1.7158e+00,1.7892e+00,1.8692e+00,1.9566e+00,2.0527e+00,2.1586e+00,2.2761e+00,2.4071e+00]
    ni = [1.347,1.338,1.352,1.367,1.393,1.437,1.497,1.581,1.696,1.878,2.198,2.684,3.196,3.669,3.982,4.062,3.999,3.883,3.772,3.686,3.625,3.588,3.575,3.589,3.633,3.724,\
          3.922,4.246,4.456,4.825,4.781,4.582,4.404,4.258,4.135,4.032,3.945,3.872,3.815,3.750,3.690,3.650,3.592,3.509,\
          3.4871e+00,3.4720e+00,3.4579e+00,3.4447e+00,3.4323e+00,3.4205e+00,3.4092e+00,3.3986e+00,3.3883e+00,3.3786e+00,3.3692e+00,3.3602e+00,3.3516e+00,3.3433e+00,\
          3.3354e+00,3.3277e+00,3.3204e+00,3.3133e+00,3.3065e+00,3.3000e+00,3.2937e+00,3.2876e+00,3.2818e+00,3.2762e+00,3.2708e+00,3.2656e+00,3.2607e+00,3.2559e+00,\
          3.2514e+00,3.2470e+00,3.2428e+00,3.2388e+00,3.2350e+00,3.2314e+00,3.2279e+00,3.2246e+00,3.2215e+00,3.2185e+00,3.2157e+00,3.2131e+00]    
    ki = [2.443,2.502,2.577,2.669,2.776,2.893,3.030,3.187,3.376,3.604,3.845,3.957,3.881,3.617,3.177,2.733,2.393,2.172,2.040,1.966,1.927,1.914,1.921,1.946,1.988,2.054,\
          2.134,2.041,1.879,1.558,1.012,0.722,0.556,0.446,0.367,0.305,0.258,0.227,0.202,0.167,0.145,0.111,0.05,0.02,\
          0.005,0.001,0.0005,0.0002,0.0001,0.00005,0.00002,0.00001,0.000005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    n = spi.interp1d(xi, ni, 'cubic')
    k = spi.interp1d(xi, ki, 'cubic')
    return (n(x)+1j*k(x))**2

def epsilon(medium,lambdav):
    if medium == "Al":
        epsilon_medium = Al(lambdav)
    elif medium == "Si":
        epsilon_medium = Si(lambdav)
    elif medium == "AlAs":
        epsilon_medium = AlAs(lambdav)
    elif medium == "GaAs":
        epsilon_medium = GaAs(lambdav)
    elif medium == "AlGaAs (70% Al)":
        epsilon_medium = AlGaAs70(lambdav)
    elif medium == "AlGaAs (31.5% Al)":
        epsilon_medium = AlGaAs31(lambdav)
    elif medium == "TiO2":
        epsilon_medium = TiO2(lambdav)
    elif medium == "Ag":
        epsilon_medium = Ag(lambdav)
    elif medium == "fused silica":
        epsilon_medium = silica(lambdav)
    elif medium == "BaSF":
        epsilon_medium = BaSF(lambdav)
    else:
        print("Oops! Medium not known")
        
    return epsilon_medium

def omega2lambda(x): # in fs^{-1} and nm
    return 2.e-6*np.pi*spc.c*np.reciprocal(x , out=np.zeros_like(x), where=x!=0)